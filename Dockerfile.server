# Use the Terraform image as the base
FROM hashicorp/terraform:1.5.5

# Install Python, Git, SSH client, AWS CLI, and other necessary tools
RUN apk add --no-cache \
    python3 \
    python3-dev \
    py3-pip \
    build-base \
    curl \
    unzip \
    zip \
    bash \
    git \
    openssh-client \
    aws-cli # Added AWS CLI

# Upgrade pip
RUN pip install --no-cache-dir --upgrade pip

# Create .ssh directory and set up basic SSH config for GitHub
RUN mkdir -p /root/.ssh && \
    chmod 700 /root/.ssh && \
    printf "Host github.com\n\
  HostName github.com\n\
  User git\n\
  IdentityFile /root/.ssh/id_git_rsa\n\
  StrictHostKeyChecking no\n\
  UserKnownHostsFile /dev/null\n" > /root/.ssh/config && \
    chmod 600 /root/.ssh/config

# Set working directory for the application
WORKDIR /server

# Copy application files
COPY ./server /server

# Copy the entrypoint script
COPY entrypoint.sh /usr/local/bin/entrypoint.sh
RUN chmod +x /usr/local/bin/entrypoint.sh

# Copy the scenario manifest
COPY scenario_manifest.json /server/scenario_manifest.json


# Install application Python dependencies
RUN pip install --no-cache-dir -r /server/requirements.txt

ENV FLASK_ENV=development # For ECS, this might be overridden by Task Definition

# Expose the application port
EXPOSE 5000

# Use the new entrypoint script
ENTRYPOINT ["/usr/local/bin/entrypoint.sh"]

# Default command to run the Flask application (will be passed to entrypoint.sh)
CMD ["python", "main.py"]
